// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.IO;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace KP_Soloviev.Models
{
    public partial class Anime_CollectionContext : DbContext
    {
        private readonly IConfiguration _configuration;

        // Конструктор без параметров
        public Anime_CollectionContext()
        { }

        // Конструктор с Dependency Injection
        public Anime_CollectionContext(DbContextOptions<Anime_CollectionContext> options, IConfiguration configuration)
            : base(options)
        {
            _configuration = configuration;
        }

        // DbSet-ы для всех сущностей
        public virtual DbSet<Anime> Animes { get; set; }
        public virtual DbSet<Anime_Favourite> Anime_Favourites { get; set; }
        public virtual DbSet<Anime_Rating> Anime_Ratings { get; set; }
        public virtual DbSet<Favourite> Favourites { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<Review> Reviews { get; set; }
        public virtual DbSet<User> Users { get; set; }

        // Настройка подключения к базе данных
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                var builder = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);

                var configuration = builder.Build();
                var connectionString = configuration.GetConnectionString("DefaultConnection");

                optionsBuilder.UseSqlServer(connectionString, sqlServerOptions =>
                {
                    sqlServerOptions.EnableRetryOnFailure(
                        maxRetryCount: 5,
                        maxRetryDelay: TimeSpan.FromSeconds(30),
                        errorNumbersToAdd: null
                    );
                });
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Anime>(entity =>
            {
                entity.HasKey(e => e.AnimeID).HasName("PK__Anime__AF82110AD8650DA8");

                entity.ToTable("Anime");

                entity.Property(e => e.AnimeID).ValueGeneratedNever();
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsFixedLength();
                entity.Property(e => e.Genre)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
                entity.Property(e => e.Photo).HasColumnType("varbinary(max)");
                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Anime_Favourite>(entity =>
            {
                entity.HasKey(e => new { e.AnimeID, e.FavouriteID }).HasName("PK__Anime_Fa__1A165A5D6258B4DF");

                entity.HasOne(d => d.Anime).WithMany(p => p.Anime_Favourites)
                    .HasForeignKey(d => d.AnimeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Anime_Fav__Anime__5FB337D6");

                entity.HasOne(d => d.Favourite).WithMany(p => p.Anime_Favourites)
                    .HasForeignKey(d => d.FavouriteID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Anime_Fav__Favou__60A75C0F");
            });

            modelBuilder.Entity<Anime_Rating>(entity =>
            {
                entity.HasKey(e => new { e.AnimeID, e.RatingID }).HasName("PK__Anime_Ra__704ECE8F4F08FAE0");

                entity.ToTable("Anime_Rating");

                entity.HasOne(d => d.Anime).WithMany(p => p.Anime_Ratings)
                    .HasForeignKey(d => d.AnimeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Anime_Rat__Anime__49C3F6B7");

                entity.HasOne(d => d.Rating).WithMany(p => p.Anime_Ratings)
                    .HasForeignKey(d => d.RatingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Anime_Rat__Ratin__4AB81AF0");
            });

            modelBuilder.Entity<Favourite>(entity =>
            {
                entity.HasKey(e => e.FavouriteID).HasName("PK__Favourit__5944B57AAFBF0408");

                entity.Property(e => e.NameOfList)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.HasOne(d => d.User).WithMany(p => p.Favourites)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Favourites_Users");
            });

            modelBuilder.Entity<Rating>(entity =>
            {
                entity.HasKey(e => e.RatingID).HasName("PK__Rating__FCCDF85C978E8F6E");

                entity.ToTable("Rating");

                entity.Property(e => e.RatingID).ValueGeneratedNever();
                entity.Property(e => e.Criteria)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
                entity.Property(e => e.NameOfList)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
                entity.Property(e => e.RatingType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.HasKey(e => e.ReviewID).HasName("PK__Reviews__74BC79AE5CFE2927");

                entity.Property(e => e.Author)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsFixedLength();
                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.HasOne(d => d.Anime).WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.AnimeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Reviews__AnimeID__6EF57B66");

                entity.HasOne(d => d.User).WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Reviews__UserID__6FE99F9F");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.UserID).HasName("PK__Users__1788CCACB8E63C48");

                entity.Property(e => e.UserID).ValueGeneratedNever();
                entity.Property(e => e.UserMail)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
                entity.Property(e => e.UserPass)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
                entity.Property(e => e.UserRole)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}